To achieve the functionality where you calculate `total` in one component and use it in another component while returning `FormattedNumber` JSX, you can use React's context API to share the `total` value across components. This approach allows you to calculate the `total` in one place and then access it in another component for further calculations or display.

First, create a context to hold the `total` value:

```typescriptreact
// TotalContext.tsx
import React, { createContext, useContext, useState } from 'react';

interface TotalContextProps {
 total: number;
 setTotal: (value: number) => void;
}

const TotalContext = createContext<TotalContextProps | undefined>(undefined);

export const useTotal = () => {
 const context = useContext(TotalContext);
 if (!context) {
    throw new Error('useTotal must be used within a TotalProvider');
 }
 return context;
};

export const TotalProvider: React.FC = ({ children }) => {
 const [total, setTotal] = useState<number>(0);

 return (
    <TotalContext.Provider value={{ total, setTotal }}>
      {children}
    </TotalContext.Provider>
 );
};
```

Next, modify the `Total` component to calculate the `total` and update the context:

```typescriptreact
// Total.tsx
import React, { useEffect } from 'react';
import { useTotal } from './TotalContext'; // Adjust the import path as necessary
import { FormattedNumber } from './FormattedNumber'; // Adjust the import path as necessary

const Total = ({ control }: { control: Control<FormValuesSchema> }) => {
 const { setTotal } = useTotal();
 const formValues = useWatch({
    name: "item",
    control,
 }) || [];

 useEffect(() => {
    const total = formValues.reduce(
      (acc, current) => acc + (current.price || 0) * (current.quantity || 0),
      0
    );
    setTotal(total);
 }, [formValues, setTotal]);

 return <FormattedNumber value={total} />;
};
```

Finally, use the `Total` component and access the `total` value in the `TotalDue` component:

```typescriptreact
// TotalDue.tsx
import React from 'react';
import { useTotal } from './TotalContext'; // Adjust the import path as necessary
import { FormattedNumber } from './FormattedNumber'; // Adjust the import path as necessary

const TotalDue = ({ control }: { control: Control<FormValuesSchema> }) => {
 const { total } = useTotal();
 const formValues = useWatch({
    name: "payments",
    control,
 }) || [];

 const due = formValues.reduce(
    (acc, current) => acc - (current.paid || 0),
    total
 );

 return <FormattedNumber value={due} />;
};
```

Wrap your application or the part of your application that uses these components with the `TotalProvider`:

```typescriptreact
// App.tsx or a similar entry point
import React from 'react';
import { TotalProvider } from './TotalContext'; // Adjust the import path as necessary
import { Total, TotalDue } from './YourComponents'; // Adjust the import path as necessary

const App: React.FC = () => {
 return (
    <TotalProvider>
      {/* Your form and other components */}
      <Total control={yourControl} />
      <TotalDue control={yourControl} />
    </TotalProvider>
 );
};

export default App;
```

This setup allows you to calculate the `total` in the `Total` component, share it via context, and use it in the `TotalDue` component while returning `FormattedNumber` JSX.